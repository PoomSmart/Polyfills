// This file is auto-generated by generate_polyfill_header.sh. DO NOT EDIT.
#import <Foundation/Foundation.h>

static NSString *polyfillScript = @"console.log('Start Polyfills');\
if (!Array.prototype.at) {\
  Array.prototype.at = function(index) {\
    if (index < 0) index = this.length + index;\
    if (index >= 0 && index < this.length) return this[index];\
    return undefined;\
  };\
}\
if (!Array.prototype.flatMap) {\
  Object.defineProperty(Array.prototype, 'flatMap', {\
    value: function(callback, thisArg) {\
      var self = thisArg || this;\
      if (self === null) throw new TypeError('Array.prototype.flatMap called on null or undefined');\
      if (typeof callback !== 'function') throw new TypeError(callback + ' is not a function');\
      var list = [];\
      var o = Object(self);\
      var len = o.length >>> 0;\
      for (var k = 0; k < len; ++k) {\
        if (k in o) {\
          var part_list = callback.call(self, o[k], k, o);\
          list = list.concat(part_list);\
        }\
      }\
      return list;\
    },\
    configurable: true,\
    writable: true\
  });\
}\
if (typeof crypto === 'undefined')\
  var crypto = require('crypto');\
if (!('randomUUID' in crypto))\
  crypto.randomUUID = function randomUUID() {\
    return (\
      [1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g,\
        c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\
    );\
  };\
HTMLDialogElement = String;\
const originalMatches = Element.prototype.matches;\
Element.prototype.matches = function(selector) {\
  const modifiedSelector = selector.replace(/:modal/g, '.modal');\
  return originalMatches.call(this, modifiedSelector);\
};";
