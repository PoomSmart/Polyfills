#!/bin/bash
# generate_polyfill_header.sh
# It will look for .js files in /$SCRIPT_FOLDER/ and generate /$HEADER_FILE.h

set -e

SCRIPT_FOLDER=$1
HEADER_FILE=$2
VARIABLE_NAME=$3
if [ -z "$SCRIPT_FOLDER" ] || [ -z "$HEADER_FILE" ] || [ -z "$VARIABLE_NAME" ]; then
  echo "Usage: $0 <script_folder> <header_file> <variable_name>"
  exit 1
fi

SCRIPT_ABS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_SOURCE_DIR="$SCRIPT_ABS_DIR/$SCRIPT_FOLDER"
OUTPUT_H_FILE="$SCRIPT_ABS_DIR/$HEADER_FILE.h"

mkdir -p "$SCRIPTS_SOURCE_DIR"

{
  echo "// This file is auto-generated by $(basename "$0"). DO NOT EDIT."
  echo "#import <Foundation/Foundation.h>"
  echo ""
  echo -n "static NSString *$VARIABLE_NAME = @\""
} > "$OUTPUT_H_FILE"

TEMP_JS_CONCAT=$(mktemp)
TEMP_JS_MINIFIED=$(mktemp)
TEMP_JS_TRANSPILED=$(mktemp)
trap 'rm -f "$TEMP_JS_CONCAT" "$TEMP_JS_MINIFIED" "$TEMP_JS_TRANSPILED"' EXIT

find "$SCRIPTS_SOURCE_DIR" -name "*.js" -type f -print0 | sort -z | while IFS= read -r -d $'\0' js_file; do
  grep -v '^[[:space:]]*//' "$js_file" >> "$TEMP_JS_CONCAT"
done

if [ -s "$TEMP_JS_CONCAT" ]; then
  npx babel "$TEMP_JS_CONCAT" -o "$TEMP_JS_TRANSPILED"
  npx uglifyjs "$TEMP_JS_TRANSPILED" -o "$TEMP_JS_MINIFIED"
  cp "$TEMP_JS_MINIFIED" "$SCRIPT_ABS_DIR/$HEADER_FILE.h.js"
  echo "\\" >> "$OUTPUT_H_FILE"
  sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/$/\\/' "$TEMP_JS_MINIFIED" >> "$OUTPUT_H_FILE"
  truncate -s-2 "$OUTPUT_H_FILE"
  echo "\";" >> "$OUTPUT_H_FILE"
else
  echo "\";" >> "$OUTPUT_H_FILE"
fi

echo "Generated $OUTPUT_H_FILE successfully."
